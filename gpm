#!/bin/bash

URL="https://raw.githubusercontent.com/sleepless-p03t/genesis6/master/"

# print info message
function pinfo
{
	local msg="$1"
	echo -en "\e[0;37m["
	echo -en "\e[1;34mi"
	echo -en "\e[0;37m] "
	echo -e "$msg\e[0m"
}

#print error message
function perr
{
	local msg="$1"
	echo -en "\e[0;37m["
	echo -en "\e[1;31m!"
	echo -en "\e[0;37m] "
	echo -e "$msg\e[0m"
}

#print install message
function pinstall
{
	local msg="$1"
	echo -en "\e[0;37m["
	echo -en "\e[1;32m+"
	echo -en "\e[0;37m] "
	echo -e "$msg\e[0m"
}

#install ruby gem if not already installed
function gem_install
{
	local gem="$1"
	local found=`gem list -i "^$gem$"`
	if [[ "$found" == "false" ]]; then
		sudo gem install "$gem"
		echo
	else
		pinfo "Gem $gem already installed"
	fi
}

#install deb package if not already installed
function pkg_install
{
	local pkg="$1"
	dpkg-query -l "$pkg" &> /dev/null
	if [ $? -eq 1 ]; then
		pinstall "$pkg not installed. Installing\n"
		sudo apt-get install $pkg
	else
		pinfo "$pkg already installed"
	fi
}

#install all available modules
function install_all
{
	pinstall "Installing all modules and dependencies"
	curl -s "$URL/master.list" -o master.list

	while read -r line; do
		if [[ "$line" == "BEGIN_"* ]]; then
			break
		elif [[ "$line" == "gem:"* ]]; then
			_gem=`echo "$line" | awk -F':' '{ print $NF }'`
			gem_install "$_gem"
		elif [[ "$line" == "deb:"* ]]; then
			_deb=`echo "$line" | awk -F':' '{ print $NF }'`
			pkg_install "$_deb"
		else
			if [ ! -f "$HOME/genesis6/modules/$line.gem" ]; then
				echo -en "\e[0;37mInstalling module $line..."
				pushd $HOME/genesis6 > /dev/null
				curl -s "$URL/modules/$line.gem" -o "$line.gem"
				mv "$line.gem" modules/
				popd > /dev/null
				while read -r files; do
					directory=`echo "${files%/*}"`
					file=`echo "${files##*/}"`
					pushd $HOME/genesis6 > /dev/null
					mkdir -p $directory
					curl -s $URL/$files -o $file
					mv "$file" "$directory"
					popd > /dev/null
				done< <(awk "/BEGIN_$line/{flag=1;next}/END_$line/{flag=0}flag" master.list)
				echo -e "\b\b\b [\e[1;32mdone\e[0;37m]\e[0m"
			else
				pinfo "$line already installed"
			fi
		fi
	done< <(cat master.list | sed '/^\s*$/d')

	rm master.list
	pinfo "Finished installing modules"
}

#install individual module (if not already installed)
function install_module
{
	local mod="$1"
	local src="$2"
	
	if [ -f "$HOME/genesis6/modules/$mod.gem" ]; then
		pinfo "$mod already installed"
	else
		curl -s $URL/master.list -o master.list
		if grep -Fxq "$mod" master.list; then
			echo -en "\e[0;37mInstalling module $mod..."
			while read -r line; do
				if [[ "$line" == "BEGIN_"* ]]; then
					break
				elif [[ "$line" == "gem:"* ]]; then
					_gem=`echo "$line" | awk -F':' '{ print $NF }'`
					gem_install "$_gem"
				elif [[ "$line" == "deb:"* ]]; then
					_deb=`echo "$line" | awk -F':' '{ print $NF }'`
					pkg_install "$_deb"
				elif [[ "$line" == "$mod" ]]; then
					pushd $HOME/genesis6 > /dev/null
					curl -s "$URL/modules/$line.gem" -o "$line.gem"
					mv "$line.gem" modules/
					popd > /dev/null
					if [[ "$src" != "" ]]; then
						while read -r files; do
							directory=`echo "${files%/*}"`
							file=`echo "${files##*/}"`
							pushd $HOME/genesis6 > /dev/null
							mkdir -p $directory
							curl -s $URL/$files -o $file
							mv "$file" "$directory"
							popd > /dev/null
						done< <(awk "/BEGIN_$line/{flag=1;next}/END_$line/{flag=0}flag" master.list)
					fi
					echo -e "\b\b\b [\e[1;32mdone\e[0;37m]\e[0m"
					break
				fi
			done< <(cat master.list | sed '/^\s*$/d')
			pinfo "Module installed successfully"
		else
			perr "Module not found: $mod"
		fi
		rm master.list
	fi
}

#install the core of genesis
function install_core
{
	mkdir -p $HOME/genesis6/modules
	mkdir -p $HOME/genesis6/.core/gems
	mkdir -p $HOME/genesis6/.core/icons

	pinfo "Preconfiguring wine and multi-arch"
	multiarch=`wine cmd /c "exit" 2>&1 | grep '"dpkg --add-architecture i386"'`
	_wine32=`wine cmd /c "exit" 2>&1 | grep '"apt-get install wine32"'`

	if [[ "$multiarch" != "" ]]; then
		pinstall "Adding multi-arch i386"
		sudo dpkg --add-architecture i386
		sudo apt-get update
	fi

	if [[ "$_wine32" != "" ]]; then
		pinstall "wine32 not installed. Installing\n"
		sudo apt-get install wine32
	else
		pinfo "wine32 already installed"
	fi
	
	pinfo "Setting up curl"
	pkg_install "curl"

	echo -en "\e[0;37mDownloading Genesis core..."
	pushd $HOME/genesis6 > /dev/null
	curl -s $URL/genesis -o genesis
	curl -s $URL/gpm -o gpm
	curl -s $URL/gecko.png -o gecko.png
	curl -s $URL/mkmod -o mkmod
	curl -s $URL/bgem -o bgem
	curl -s $URL/.core/gems/internals.gem -o internals.gem
	mv internals.gem .core/gems/
	curl -s $URL/.core/icons/icon1 -o icon1
	curl -s $URL/.core/icons/icon2 -o icon2
	curl -s $URL/.core/icons/icon3 -o icon3
	curl -s $URL/.core/icons/icon4 -o icon4
	curl -s $URL/.core/icons/icon5 -o icon5

	for i in `seq 1 5`; do
		mv "icon$i" .core/icons/
	done

	touch .history
	curl -s $URL/README -o README
	popd > /dev/null
	
	echo -e "\b\b\b [\e[1;32mdone\e[0;37m]\e[0m"

	exec_path="/usr/local/bin"
	if [ ! -f "$exec_path/genesis" ]; then
		pinfo "Creating exec script: genesis"
		echo '#!/bin/bash' > $exec_path/genesis
		echo >> $exec_path/genesis
		echo 'pushd $HOME/genesis6 > /dev/null' >> $exec_path/genesis
		echo 'ruby genesis "$@"' >> $exec_path/genesis
		echo 'popd > /dev/null' >> $exec_path/genesis

		sudo chmod +x $exec_path/genesis
	fi
	
	if [ ! -f "$exec_path/gpm" ]; then
		pinfo "Creating exec script: gpm"
		echo '#!/bin/bash' > $exec_path/gpm
		echo >> $exec_path/gpm
		echo 'pushd $HOME/genesis6 > /dev/null' >> $exec_path/gpm
		echo 'bash gpm "$@"' >> $exec_path/gpm
		echo 'popd > /dev/null' >> $exec_path/gpm

		chmod +x $exec_path/gpm
	fi
}

############################################################################

# Arg parse and exec

argc=$#

# help
if [ -z $1 ] || [[ "$1" == "help" ]]; then
	echo "usage: "
	echo -e "\tgpm install [--core | --all]"
	echo "or"
	echo -e "\tgpm add [--src] <module>"
	echo "or"
	echo -e "\tgpm add all"
	echo "or"
	echo -e "\tgpm help"
	
	exit 1
fi

# install
if [[ "$1" == "install" ]]; then

	if [ $argc -gt 2 ]; then
		perr "Too many arguments"
		exit 1
	fi

	if [[ "$2" == "--core" ]] || [ -z $2 ]; then
		install_core
	elif [[ "$2" == "--all" ]]; then
		install_core
		install_all
	else
		perr "Unknown option $2"
		exit 1
	fi
# add module
elif [[ "$1" == "add" ]]; then
	if [ $argc -eq 2 ]; then
		if [[ "$2" == "--src" ]]; then
			perr "missing module name"
			exit 1
		elif [[ "$2" == "all" ]]; then
			install_all
		else
			install_module "$2" ""
		fi
	elif [ $argc -eq 3 ]; then
		if [[ "$2" == "--src" ]]; then
			install_module "$3" "1"
		elif [[ "$3" == "--src" ]]; then
			install_module "$2" "1"
		fi
	elif [ $argc -eq 1 ]; then
		perr "not enough parameters"
		exit 1
	elif [ $argc -gt 3 ]; then
		perr "Too many arguments"
		exit 1
	fi
elif [[ "$1" != "help" ]]; then
	perr "Unknown command $1"
	exit 1
fi
