#!/usr/bin/ruby

require 'readline'
require 'colorize'
require 'fileutils'

# routine to count words in string
class String
	
	def count_words
		n = 0
		scan(/\b\S+\b/) { n += 1 }
		n
	end
end

# persistent history handler
class History
	
	# write history file
	def self.write_history(local_history)
		File.open(".history", "w+") do |f|
			local_history.each { |element| f.puts(element) }
		end

		system("cat .history | sed '/^\s*$/d' | awk '!(f == $0){print} {f=$0}' > .h")
		system("mv .h .history")
	end
	
	#read history file
	def self.get_history
		return File.readlines(".history").join(",").gsub(",", "").split("\n")
	end
end

# extract scripts and dependencies from gem file
def extract_resource(gem, destination, _load)
	if destination[-1] != "/"
		destination += "/"
	end
	system <<~EOS
		mv #{gem}.gem #{gem}.tar
		tar -xf #{gem}.tar
		gunzip data.tar.gz
		tar -xf data.tar
		rm *.gz
		mv #{gem}.tar #{gem}.gem
		rm *.tar

		mv lib/* #{destination}
		rm -rf lib/
	EOS
	
	# load on extract
	if _load
		Dir["#{File.dirname(__FILE__)}/#{destination}*.rb"].each { |f| load(f) }
	end
end

# ignore ctrl+c
trap("INT", "SIG_IGN")

do_cleanup = 1
if File.file?(".runtime")
	do_cleanup = 0
	Output.err_msg("Genesis already running. Aborting", "")
	exit
end

system("mkdir .runtime")
extract_resource('.core/gems/internals', '.runtime', true)

flag = ARGV[0]

# icon output
if flag != '-q'
	cols = `tput cols | tr -d '\n'`.to_i
	if cols > 96
		icon = 1 + rand(5)
	else
		icon = 1 + rand(3)
	end

	path = "#{Dir.pwd}/.core/icons"
	a = Animation.new("#{path}/icon#{icon}")
	if icon == 2 || icon == 4
		a.add_rule('g', Color.HIDDEN)
	end
	if icon == 2
		a.add_rule("!g", Color.LIGHT_BLUE)
	elsif icon == 4
		a.add_rule("!g", Color.RANDOM)
	elsif icon == 1
		a.add_rule('*', Color.WHITE)
		a.add_rule('!*', Color.LIGHT_RED)
	elsif icon == 3
		a.add_rule('0', Color.HIDDEN)
		a.add_rule('!0', Color.LIGHT_YELLOW)
	elsif icon == 5
		a.add_rule('r', Color.HIDDEN)
		a.add_rule('!r', Color.RANDOM)
	end
	if flag == "-s"
		a.animate(Color.LIGHT_WHITE, "static")
	elsif flag != "-r"
		a.animate(Color.LIGHT_WHITE, nil)
	end
end

# parse core module data
Dir.glob('modules/*.gem') do |g|
	gem = File.expand_path(g)
	mod = `echo -n #{gem} | awk -F'.' '{ print $1 }' | tr -d '\n'`
	extract_resource("#{mod}", '.runtime', false)
	mn = `echo -n #{mod} | awk -F'/' '{ print $NF }' | tr -d '\n'`
	Parser.load_module(mn)
end

# initial command opts
MAIN = [ 'exit', 'clear', 'cls', 'load', 'list' ]

# Dynamic tab completion control system
CompletionProc = Proc.new do |str|
	current = Readline.line_buffer
	
	# First two conditions ensure genesis doesn't crash when attempting tab completion after unknown commands
	if Lookup.cur_module == "" && current != "" && current != " " && !MAIN.any? { |s| s.include?(current.split(' ')[0]) }
		[]
	elsif current != "" && current != " " && Lookup.cur_module != "" && !Lookup.lookup(Lookup.cur_module, "main").any? { |s| s.include?(current.split(' ')[0]) } && current.split(' ')[0] != "set"
		[]
	elsif current.start_with?("load ")
		mod = current.split(" ")[1]
		list = Lookup.get_modules
		if list.include?(mod)
			[]
		else
			list.grep(/^#{Regexp.escape(str)}/)
		end
	elsif current.start_with?("set ")
		var = current.split(" ")[1]
		list = Lookup.lookup(Lookup.cur_module, "set")
		if !list.include?(var)
			list.grep(/^#{Regexp.escape(str)}/)
		elsif current.count_words == 3
			[]
		else
			[]
		end
	elsif current.start_with?("configs") || current.start_with?("unload") || MAIN.include?(current.gsub(" ", ""))
		[]
	# not yet implemented
	elsif current.start_with?("list ")
		[]
	elsif MAIN.include?(current.gsub(" ", ""))
		[]
	elsif !MAIN.include?(current.gsub(" ", "")) && Lookup.cur_module == ""
		MAIN.grep(/^#{Regexp.escape(str)}/)
	elsif !MAIN.include?(current.gsub(" ", "")) && Lookup.cur_module != ""
		list = Lookup.lookup(Lookup.cur_module, "main")
		list.grep(/^#{Regexp.escape(str)}/)
	else
		[]
	end
end

Readline.completion_append_character = " "
Readline.completer_word_break_characters = " "

Readline.completion_proc = CompletionProc
# add history file data to runtime history
if File.file?(".history")
	History.get_history.each { |h| Readline::HISTORY.push(h) }
else
	FileUtils.touch('.history')
end

prompt = "genesis"
_module = ""

# Dynamic input processing and execution
while buf = Readline.readline("\e[1;37m#{prompt} \e[1;33m#{_module}\e[1;37m> \e[0m", true)
	
	Readline::HISTORY.to_a
	if buf.start_with?("exit")
		History.write_history(Readline::HISTORY.to_a)
		break
	end

	if buf.start_with?("clear")
		print `clear`
	elsif buf.start_with?("cls")
		print `printf '\033c'`
	elsif buf.start_with?("load")
		mod = buf.split(" ")[1]
		if mod == "" || mod == nil
			Output.err_msg("Missing module", "")
		elsif Lookup.get_modules.include?(mod)
			if Lookup.cur_module != ""
				Store.clear
			end
			Output.info_msg("Loaded module:", mod)
			Lookup.set_cur_module(mod)
			_module = "#{Lookup.cur_module} "
		else
			Output.err_msg("Unknown module: ", mod)
		end
	elsif buf.start_with?("set")
		if Lookup.cur_module == ""
			Output.err_msg("Unknown command: ", "set")
		else
			var = ""
			val = ""
			if buf.count_words == 2
				var = buf.split(" ")[1]
			elsif buf.count_words == 1
				var = ""
				val = ""
			else
				var = buf.split(" ")[1]
				val = buf.split(" ")[2]
			end	
			Validate.validate_vars(Lookup.cur_module, var, val)
		end
	elsif buf.start_with?("unload")
		if Lookup.cur_module == ""
			Output.err_msg("Unknown command: ", "unload")
		else
			Store.clear
			Lookup.set_cur_module("")
			_module = ""
		end
	elsif buf.start_with?("generate")
		if Lookup.cur_module == ""
			Output.err_msg("Unknown command: ", "generate")
		else
			Exec.exec_module(Lookup.cur_module, Store.get_store)
		end
	elsif buf.start_with?("configs")
		if Lookup.cur_module == ""
			Output.err_msg("Unknown command: ", "configs")
		else
			Store.display
		end
	elsif Lookup.cur_module != "" && Lookup.lookup(Lookup.cur_module, "main").include?(buf.split(" ")[0])
		Exec.exec_func(Lookup.cur_module, buf.split(" ")[0])
	elsif buf == "" || buf.gsub(/[ \t]/, "") == ""
		puts
	else
		Output.err_msg("Unknown command: ", buf)
	end
end

# cleanup on exit
at_exit do
	if do_cleanup == 1
		system("rm -rf .runtime/")
	end
end
